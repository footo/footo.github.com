<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Foo! To!]]></title>
  <link href="http://footo.github.com/atom.xml" rel="self"/>
  <link href="http://footo.github.com/"/>
  <updated>2013-02-19T14:24:27+08:00</updated>
  <id>http://footo.github.com/</id>
  <author>
    <name><![CDATA[footo]]></name>
    <email><![CDATA[footo@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iamapost]]></title>
    <link href="http://footo.github.com/blog/2013/02/19/iamapost/"/>
    <updated>2013-02-19T14:24:00+08:00</updated>
    <id>http://footo.github.com/blog/2013/02/19/iamapost</id>
    <content type="html"><![CDATA[<p><em>I am a post!</em>
Hello, World!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[spoj 726 promotion [tyvj P1852 - [HNOI2004]宠物收养所 两道treap的裸题练习]]></title>
    <link href="http://footo.github.com/blog/2012/12/01/spoj726-plus-tyvj1852/"/>
    <updated>2012-12-01T14:21:00+08:00</updated>
    <id>http://footo.github.com/blog/2012/12/01/spoj726-plus-tyvj1852</id>
    <content type="html"><![CDATA[<p>首先是spoj的pro。这是道彻头彻尾的裸题。涉及到的操作只有插入、查最值、删除。唯一要注意的就是答案需要用long long存。不说了。</p>

<p><a href="codepad.org/MIH1sOey">view code</a></p>

<p>然后是宠物收养所。题目描述略长，然而看下来可以发现几个人挑一个宠物可以看成一个宠物挑几个人，再加上同一时刻只会全是人或全是宠物，瞬间好做。</p>

<p>对于每一个访问，进行如下判定：</p>

<ul>
<li>若树为空，直接插入；</li>
<li>否则若树中类型与当前类型相同，插入；</li>
<li>再否则就查找访问数据的前驱与后继，比较后计入答案、删除。</li>
</ul>


<p><a href="codepad.org/z6HctmHK">view code</a></p>

<p>有一点很奇怪就是pet这道题在COGS上交的时候怎么交都是RE，返回错误139，不知所云。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(´-ω-｀)一些关于treap的想法]]></title>
    <link href="http://footo.github.com/blog/2012/12/01/something-about-treap/"/>
    <updated>2012-12-01T10:41:00+08:00</updated>
    <id>http://footo.github.com/blog/2012/12/01/something-about-treap</id>
    <content type="html"><![CDATA[<p>treap是前几天学的。不得不说treap这种数据结构是在很好理解，代码量也偏低（相对于其他各种平衡树=-=）。关于treap的理论就不提了，满大街都是，这里只写一些实现方面的细节与技巧。</p>

<h3>树节点的存储方式</h3>

<p>数组(mem[])模拟指针。需要的域有数值(data)、子节点(用了在zkw写的splay中的处理方法，用ch[2]来记录两个儿子的指针。会方便很多。)以及treap特有的标记(tag)。这里满足左子树数值小于自己数值；标记则是大根堆。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct tree {
</span><span class='line'>  int tag, ch[2];
</span><span class='line'>  ll data;
</span><span class='line'>  tree(): data(-oo), tag((rand()&lt;&lt;15)+rand()) { ch[0]=ch[1]=0; }
</span><span class='line'>} mem[N];</span></code></pre></td></tr></table></div></figure>


<p><em>注：oo=∞。<code>(rand()&lt;&lt;15)+rand()</code>是一种不错的解决随机范围的方式哦=w=</em></p>

<!-- more -->


<h3>对于操作中节点改动的处理</h3>

<p>对于可能发生的节点改动，为了使父子关系对应正确，所有可能对结构改造的操作均返回改动后的节点指针。大概就是这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int operation(int T) {
</span><span class='line'>  do something;
</span><span class='line'>  return new_T;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>旋转操作</h3>

<p>传入一个布尔量d，表示将d子节点旋转至当前位置（与字面上的左旋、右旋相反），于是旋转只要一个。<em>(从zkw的splay那里学来的-v-)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>inline int rot(int T, bool d) {
</span><span class='line'>  int x=mem[T].ch[d], y=mem[x].ch[!d]; 
</span><span class='line'>  mem[T].ch[d]=y; mem[x].ch[!d]=T;
</span><span class='line'>  return x;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>插入操作</h3>

<p>插入操作采用的思想是先按传统BST的插入方法插入，然后对于每一层的节点与下一层节点比较，若不满足堆性质（子节点标记大于当前标记）则将子节点旋转上来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int ins(int T, ll d0) {
</span><span class='line'>  bool d;
</span><span class='line'>  if (!T) { mem[cnt].data=d0; return size++; }
</span><span class='line'>  mem[T].ch[d=(d0&gt;=mem[T].data)]=ins(mem[T].ch[d], d0);
</span><span class='line'>  if (mem[mem[T].ch[d]].tag&gt;mem[T].tag) T=rot(T, d);
</span><span class='line'>  return T;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>注：cnt表示当前使用的数组内存数。</em></p>

<h3>查询/前趋/后继/最值操作</h3>

<p>四合一。传入一个查询的数值d0及一个布尔量d，若d==0则表示寻找一个数值不小于d0的节点，反之则找不大于d0的节点。最小值只需调用fin(-oo,0)，最大值类似。</p>

<p>操作采用贪心逼近思想。</p>

<blockquote><p>   在树中查找，一旦遇到一个不大于这个元素的值的节点，更新当前的最优的节点，然后在当前节点的右子树中继续查找，目的是希望能找到一个更接近于这个元素的节点。如果遇到大于这个元素的值的节点，不更新最优值，节点的左子树中继续查找。直到遇到空节点，查找结束，当前最优的节点的值就是要求的前驱。求后继的方法与上述相似，只是要找不小于这个元素的值的节点。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int fin(int T, ll d0, int best, bool d) {
</span><span class='line'>  if (!T) return best;
</span><span class='line'>        if (mem[T].data==d0) return T;
</span><span class='line'>  if (d^(mem[T].data&gt;d0)) best=T;
</span><span class='line'>  return fin(mem[T].ch[!(d^(best==T))],d0,best,d);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>删除操作</h3>

<p>几个基本操作中最烦的。传入待删除数值todel，从根开始查找这一节点并开始删除。虽然也可以直接传入待删除指针并从该指针开始删除，但这就需要记录父亲指针，在维护节点时无疑会困难很多。因此在时间要求不特别严格是还是用这种方法较好。</p>

<p>利用标记的堆性质，将待删除节点不断与标记较大的子节点交换（旋转），直至成为叶子节点后返回0即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int del(int T, ll todel) {
</span><span class='line'>  int ret=T; bool d;
</span><span class='line'>  if (todel==mem[T].data) {
</span><span class='line'>    if (!(mem[T].ch[0]||mem[T].ch[1])) return 0;
</span><span class='line'>    ret=rot(T, d=(mem[mem[T].ch[0]].tag&lt;mem[mem[T].ch[1]].tag));
</span><span class='line'>    mem[ret].ch[!d]=del(T,todel);
</span><span class='line'>  }
</span><span class='line'>  else mem[T].ch[d=todel&gt;mem[T].data]=del(mem[T].ch[d],todel);
</span><span class='line'>  return ret;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>有些部分略难懂，可以简单画一画再看</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
