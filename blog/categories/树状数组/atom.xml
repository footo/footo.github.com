<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树状数组 | Foo! To!]]></title>
  <link href="http://footo.github.com/blog/categories/树状数组/atom.xml" rel="self"/>
  <link href="http://footo.github.com/"/>
  <updated>2013-07-12T21:44:58+08:00</updated>
  <id>http://footo.github.com/</id>
  <author>
    <name><![CDATA[footo]]></name>
    <email><![CDATA[footo@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一些关于BIT扩展的整理]]></title>
    <link href="http://footo.github.com/blog/2013/07/08/extension-about-bit/"/>
    <updated>2013-07-08T21:53:00+08:00</updated>
    <id>http://footo.github.com/blog/2013/07/08/extension-about-bit</id>
    <content type="html"><![CDATA[<p>树状数组（BIT）以其代码简洁、效率高见长，但又由于它的应用弹性远不如线段树而与其在竞赛中相互制衡。
然而，对于我等手残党而言，为了尽可能避免使用线段树这种又长又难调的东西，学会增强BIT是十分必要的！</p>

<h3>基本模型-改点球段</h3>

<p>```cpp
void update(int *d, int x, int val) {</p>

<pre><code>for (; x&lt;=n; d[x]+=val, x+=lowbit(x));
</code></pre>

<p>}</p>

<p>int query(int *d, int x) {</p>

<pre><code>int ret = 0;
for (; x&lt;=n; ret+=d[x], x-=lowbit(x));
return ret;
</code></pre>

<p>}
```
树状数组的概念啊原理啊什么的都不是本文讨论的对象，因此仅献上代码，后文的几种扩展都在此基础之上。</p>

<!--more-->


<h3>第一次修改-改段求点</h3>

<p>首先分析一下BIT的作用。
不加BIT的情况下，对一个数组进行点修改的复杂度为<code>O(1)</code>，段询问复杂度为<code>O(n)</code>；而加入BIT之后，两个操作的复杂度都变为了<code>O(log n)</code>。
也就是说，他能将在<code>O(log n)</code>的时间内完成<strong>点修改</strong>和<strong>段询问</strong>。而我们的目标是在同样的时间内完成<strong>段修改</strong>和<strong>点询问</strong>。</p>

<pre><code>origin:  1  7  7  6  0  4  3
assist:  1  6  0 -1 -6  4 -1
</code></pre>

<p>设计一个新的数组<code>assist[]</code>，使得<code>assist[i]=origin[i]-origin[i-1]</code>。也就是说，<code>assist[]</code>储存的是原数组的增量。既然如此，那么将原数组<code>[l,r]</code>加上<code>val</code>的操作便可以转化为两个对<code>assist</code>数组的点操作:</p>

<pre><code>assist[l] += val;
assist[r+1] -= val;
</code></pre>

<p>因为在<code>assist</code>的某一位+1等于原数组中从这一位开始往后每一位都加了一。于是我们便成功的把对元数组的段修改转化为了对辅助数组的点修改。
在观察这两个数组，不难发现，<code>sum(assist[1..i])</code>的值即为<code>origin[i]</code>。因此，对原数组的点询问便可以转化为对辅助数组的段询问。</p>

<p>于是就明朗了。我们只需要将树状数组建立在<code>assist</code>数组之上即可实现该段求点。
（当初学这个的时候被误导的很深啊草）</p>

<p>（未完待续）</p>
]]></content>
  </entry>
  
</feed>
