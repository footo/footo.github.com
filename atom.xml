<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Foo! To!]]></title>
  <link href="http://footo.github.com/atom.xml" rel="self"/>
  <link href="http://footo.github.com/"/>
  <updated>2013-07-20T15:36:41+08:00</updated>
  <id>http://footo.github.com/</id>
  <author>
    <name><![CDATA[footo]]></name>
    <email><![CDATA[footo@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一些关于BIT扩展的整理]]></title>
    <link href="http://footo.github.com/blog/2013/07/08/extension-about-bit/"/>
    <updated>2013-07-08T21:53:00+08:00</updated>
    <id>http://footo.github.com/blog/2013/07/08/extension-about-bit</id>
    <content type="html"><![CDATA[<p>树状数组（BIT）以其代码简洁、效率高见长，但又由于它的应用弹性远不如线段树而与其在竞赛中相互制衡。
然而，对于我等手残党而言，为了尽可能避免使用线段树这种又长又难调的东西，学会增强BIT是十分必要的！</p>

<h3>基本模型-改点球段</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">void</span> <span class="n">update</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">x</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+=</span><span class="n">val</span><span class="p">,</span> <span class="n">x</span><span class="o">+=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">query</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span> <span class="n">x</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">ret</span><span class="o">+=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">x</span><span class="o">-=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>树状数组的概念啊原理啊什么的都不是本文讨论的对象，因此仅献上代码，后文的几种扩展都在此基础之上。</p>

<!--more-->


<h3>第一次修改-改段求点</h3>

<p>首先分析一下BIT的作用。
不加BIT的情况下，对一个数组进行点修改的复杂度为<code>O(1)</code>，段询问复杂度为<code>O(n)</code>；而加入BIT之后，两个操作的复杂度都变为了<code>O(log n)</code>。
也就是说，他能将在<code>O(log n)</code>的时间内完成<strong>点修改</strong>和<strong>段询问</strong>。而我们的目标是在同样的时间内完成<strong>段修改</strong>和<strong>点询问</strong>。</p>

<pre><code>origin:  1  7  7  6  0  4  3
assist:  1  6  0 -1 -6  4 -1
</code></pre>

<p>设计一个新的数组<code>assist[]</code>，使得<code>assist[i]=origin[i]-origin[i-1]</code>。也就是说，<code>assist[]</code>储存的是原数组的增量。既然如此，那么将原数组<code>[l,r]</code>加上<code>val</code>的操作便可以转化为两个对<code>assist</code>数组的点操作:</p>

<pre><code>assist[l] += val;
assist[r+1] -= val;
</code></pre>

<p>因为在<code>assist</code>的某一位+1等于原数组中从这一位开始往后每一位都加了一。于是我们便成功的把对元数组的段修改转化为了对辅助数组的点修改。
在观察这两个数组，不难发现，<code>sum(assist[1..i])</code>的值即为<code>origin[i]</code>。因此，对原数组的点询问便可以转化为对辅助数组的段询问。</p>

<p>于是就明朗了。我们只需要将树状数组建立在<code>assist</code>数组之上即可实现该段求点。
（当初学这个的时候被误导的很深啊草）</p>

<p>（未完待续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[spoj 726 promotion [tyvj P1852 - [HNOI2004]宠物收养所 两道treap的裸题练习]]></title>
    <link href="http://footo.github.com/blog/2012/12/01/spoj726-plus-tyvj1852/"/>
    <updated>2012-12-01T14:21:00+08:00</updated>
    <id>http://footo.github.com/blog/2012/12/01/spoj726-plus-tyvj1852</id>
    <content type="html"><![CDATA[<p>首先是spoj的pro。这是道彻头彻尾的裸题。涉及到的操作只有插入、查最值、删除。唯一要注意的就是答案需要用long long存。不说了。</p>

<p><a href="codepad.org/MIH1sOey">view code</a></p>

<p>然后是宠物收养所。题目描述略长，然而看下来可以发现几个人挑一个宠物可以看成一个宠物挑几个人，再加上同一时刻只会全是人或全是宠物，瞬间好做。</p>

<p>对于每一个访问，进行如下判定：</p>

<ul>
<li>若树为空，直接插入；</li>
<li>否则若树中类型与当前类型相同，插入；</li>
<li>再否则就查找访问数据的前驱与后继，比较后计入答案、删除。</li>
</ul>


<p><a href="codepad.org/z6HctmHK">view code</a></p>

<p>有一点很奇怪就是pet这道题在COGS上交的时候怎么交都是RE，返回错误139，不知所云。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(´-ω-｀)一些关于treap的想法]]></title>
    <link href="http://footo.github.com/blog/2012/12/01/something-about-treap/"/>
    <updated>2012-12-01T10:41:00+08:00</updated>
    <id>http://footo.github.com/blog/2012/12/01/something-about-treap</id>
    <content type="html"><![CDATA[<p>treap是前几天学的。不得不说treap这种数据结构是在很好理解，代码量也偏低（相对于其他各种平衡树=-=）。关于treap的理论就不提了，满大街都是，这里只写一些实现方面的细节与技巧。</p>

<h3>树节点的存储方式</h3>

<p>数组(mem[])模拟指针。需要的域有数值(data)、子节点(用了在zkw写的splay中的处理方法，用ch[2]来记录两个儿子的指针。会方便很多。)以及treap特有的标记(tag)。这里满足左子树数值小于自己数值；标记则是大根堆。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">struct</span> <span class="n">tree</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">tag</span><span class="p">,</span> <span class="n">ch</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">ll</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">()</span><span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="o">-</span><span class="n">oo</span><span class="p">),</span> <span class="n">tag</span><span class="p">((</span><span class="n">rand</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="mi">15</span><span class="p">)</span><span class="o">+</span><span class="n">rand</span><span class="p">())</span> <span class="p">{</span> <span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="n">mem</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：oo=∞。<code>(rand()&lt;&lt;15)+rand()</code>是一种不错的解决随机范围的方式哦=w=</em></p>

<!-- more -->


<h3>对于操作中节点改动的处理</h3>

<p>对于可能发生的节点改动，为了使父子关系对应正确，所有可能对结构改造的操作均返回改动后的节点指针。大概就是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">operation</span><span class="p">(</span><span class="kt">int</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">do_something</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">new_T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>旋转操作</h3>

<p>传入一个布尔量d，表示将d子节点旋转至当前位置（与字面上的左旋、右旋相反），于是旋转只要一个。<em>(从zkw的splay那里学来的-v-)</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kr">inline</span> <span class="kt">int</span> <span class="n">rot</span><span class="p">(</span><span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">mem</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="o">!</span><span class="n">d</span><span class="p">];</span>
</span><span class='line'>  <span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span> <span class="n">mem</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="o">!</span><span class="n">d</span><span class="p">]</span><span class="o">=</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>插入操作</h3>

<p>插入操作采用的思想是先按传统BST的插入方法插入，然后对于每一层的节点与下一层节点比较，若不满足堆性质（子节点标记大于当前标记）则将子节点旋转上来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">ins</span><span class="p">(</span><span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">ll</span> <span class="n">d0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span> <span class="n">mem</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">data</span><span class="o">=</span><span class="n">d0</span><span class="p">;</span> <span class="k">return</span> <span class="n">size</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="o">=</span><span class="p">(</span><span class="n">d0</span><span class="o">&gt;=</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">data</span><span class="p">)]</span><span class="o">=</span><span class="n">ins</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="p">],</span> <span class="n">d0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="p">]].</span><span class="n">tag</span><span class="o">&gt;</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">tag</span><span class="p">)</span> <span class="n">T</span><span class="o">=</span><span class="n">rot</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">d</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>注：cnt表示当前使用的数组内存数。</em></p>

<h3>查询/前趋/后继/最值操作</h3>

<p>四合一。传入一个查询的数值d0及一个布尔量d，若d==0则表示寻找一个数值不小于d0的节点，反之则找不大于d0的节点。最小值只需调用fin(-oo,0)，最大值类似。</p>

<p>操作采用贪心逼近思想。</p>

<blockquote><p>   在树中查找，一旦遇到一个不大于这个元素的值的节点，更新当前的最优的节点，然后在当前节点的右子树中继续查找，目的是希望能找到一个更接近于这个元素的节点。如果遇到大于这个元素的值的节点，不更新最优值，节点的左子树中继续查找。直到遇到空节点，查找结束，当前最优的节点的值就是要求的前驱。求后继的方法与上述相似，只是要找不小于这个元素的值的节点。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">fin</span><span class="p">(</span><span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">ll</span> <span class="n">d0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">best</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span> <span class="k">return</span> <span class="n">best</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">data</span><span class="o">==</span><span class="n">d0</span><span class="p">)</span> <span class="k">return</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">d</span><span class="o">^</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">data</span><span class="o">&gt;</span><span class="n">d0</span><span class="p">))</span> <span class="n">best</span><span class="o">=</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fin</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="o">!</span><span class="p">(</span><span class="n">d</span><span class="o">^</span><span class="p">(</span><span class="n">best</span><span class="o">==</span><span class="n">T</span><span class="p">))],</span><span class="n">d0</span><span class="p">,</span><span class="n">best</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除操作</h3>

<p>几个基本操作中最烦的。传入待删除数值todel，从根开始查找这一节点并开始删除。虽然也可以直接传入待删除指针并从该指针开始删除，但这就需要记录父亲指针，在维护节点时无疑会困难很多。因此在时间要求不特别严格是还是用这种方法较好。</p>

<p>利用标记的堆性质，将待删除节点不断与标记较大的子节点交换（旋转），直至成为叶子节点后返回0即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="n">del</span><span class="p">(</span><span class="kt">int</span> <span class="n">T</span><span class="p">,</span> <span class="n">ll</span> <span class="n">todel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span><span class="o">=</span><span class="n">T</span><span class="p">;</span> <span class="kt">bool</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">todel</span><span class="o">==</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">||</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">ret</span><span class="o">=</span><span class="n">rot</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">tag</span><span class="o">&lt;</span><span class="n">mem</span><span class="p">[</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">tag</span><span class="p">));</span>
</span><span class='line'>    <span class="n">mem</span><span class="p">[</span><span class="n">ret</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="o">!</span><span class="n">d</span><span class="p">]</span><span class="o">=</span><span class="n">del</span><span class="p">(</span><span class="n">T</span><span class="p">,</span><span class="n">todel</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="o">=</span><span class="n">todel</span><span class="o">&gt;</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">data</span><span class="p">]</span><span class="o">=</span><span class="n">del</span><span class="p">(</span><span class="n">mem</span><span class="p">[</span><span class="n">T</span><span class="p">].</span><span class="n">ch</span><span class="p">[</span><span class="n">d</span><span class="p">],</span><span class="n">todel</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些部分略难懂，可以简单画一画再看</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
